{"version":3,"sources":["components/header.js","components/footer.js","components/input-block.js","components/result.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Footer","href","InputBlock","this","props","options","map","option","index","key","value","name","isIPValid","id","type","onChange","networkClassHandler","defaultChecked","htmlFor","subnetHandler","subnetValue","renderOptions","ipHandler","ip","generateError","Result","val1","val2","val3","_this","allPossibleNetwork","data","generateRow3","networkAddress","usableHostRange","broadcastAddress","cidr","networkAddressForH1","generateRow2","ipAddress","usableHostIPRange","hosts","usableHosts","subnetNumber","wildcardMask","binarySubnetMask","ipClass","ipType","binaryID","integerID","hexID","generateAllPossibleNetworkHeader","generateAllPossibleNetworkRow","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasResult","networkClass","generateSubnet","Array","fill","_","i","newNetworkAddress","fromLong","toLong","obj","subnet","fromPrefixLen","firstAddress","lastAddress","event","setState","target","manageOptions","cidrSubnet","calIPClass","not","mask","calNetworkAddressForH1","calAllPossibleNetwork","isV4Format","split","every","e","isPrivate","quantity","number","offset","Math","pow","round","calRound","calNetworkAddressFromPrefix","d","join","toString","slice","header","input_block","bind","result","footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ecef6246.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"header main-header\">IP Subnet Calculator</h1>\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"footer-text\">\n        <p>created by <a href=\"https://github.com/kaisukez/subnetcal\">Nattapon Chantasiriworawat</a></p>\n      </div>\n    )\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\n\nclass InputBlock extends Component {\n  renderOptions() {\n     return (\n      this.props.options.map((option, index) => {\n        return (\n          <option key={index} value={option.value}>\n            {option.name}\n          </option>\n        )\n      })\n    )\n  }\n\n  generateError() {\n    if(!this.props.isIPValid)\n      return <div className=\"input-row\" id=\"invalid-ip\">invalid ipv4</div>\n    else\n      return null;\n  }\n\n  render() {\n    return (\n      <div className=\"my-box input-box\">\n        <div className=\"input-row row\">\n          <div className=\"input-text col-3\">Network Class</div>\n          <div className=\"col-9\">\n            <input type=\"radio\" name=\"class\" value=\"any\" id=\"any\" onChange={this.props.networkClassHandler} defaultChecked={true}/>\n            <label htmlFor=\"any\">Any</label>\n\n            <input type=\"radio\" name=\"class\" value=\"a\" id=\"a\" onChange={this.props.networkClassHandler}/>\n            <label htmlFor=\"a\">A</label>\n\n            <input type=\"radio\" name=\"class\" value=\"b\" id=\"b\" onChange={this.props.networkClassHandler}/>\n            <label htmlFor=\"b\">B</label>\n\n            <input type=\"radio\" name=\"class\" value=\"c\" id=\"c\" onChange={this.props.networkClassHandler}/>\n            <label htmlFor=\"c\">C</label>\n          </div>\n        </div>\n\n        <div className=\"input-row row\">\n          <div className=\"input-text col-3\">Subnet</div>\n          <div className=\"col-9\">\n            <select\n              onChange={this.props.subnetHandler}\n              value={this.props.subnetValue}\n            >\n              {this.renderOptions()}\n            </select>\n          </div>\n        </div>\n\n        <div className=\"input-row row\">\n          <div className=\"input-text col-3\">IP Address</div>\n          <div className=\"col-9\">\n            <input\n              type=\"text\"\n              onChange={this.props.ipHandler}\n              value={this.props.ip}\n            />\n            {this.generateError()}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default InputBlock;\n","import React, { Component } from 'react';\n\nclass Result extends Component {\n  generateRow2(val1, val2) {\n    return (\n      <tr>\n        <td>{val1}</td>\n        <td>{val2}</td>\n      </tr>\n    )\n  }\n\n  generateRow3(val1, val2, val3, key) {\n    return (\n      <tr key={key}>\n        <td>{val1}</td>\n        <td>{val2}</td>\n        <td>{val3}</td>\n      </tr>\n    )\n  }\n\n  generateAllPossibleNetworkRow() {\n    return this.props.allPossibleNetwork.map((data, index) => {\n      return this.generateRow3(data.networkAddress, data.usableHostRange, data.broadcastAddress, index)\n    })\n  }\n\n  generateAllPossibleNetworkHeader() {\n    if(this.props.subnetValue <= 7)\n      return <h2 className=\"header sub-header\">All Possible {this.props.cidr} Networks</h2>\n    else\n      return <h2 className=\"header sub-header\">All Possible {this.props.cidr} Networks for {this.props.networkAddressForH1}</h2>\n  }\n\n  render() {\n    return (\n      <div className=\"my-box result-box\">\n        <h2 className=\"header sub-header\">Result</h2>\n        <table className=\"table table-sm table-hover\">\n          <tbody>\n            { this.generateRow2('IP Address', this.props.ipAddress) }\n            { this.generateRow2('Network Address', this.props.networkAddress) }\n            { this.generateRow2('Usable Host IP Range', this.props.usableHostIPRange) }\n            { this.generateRow2('Broadcast Address', this.props.broadcastAddress) }\n            { this.generateRow2('Total Number of Hosts', this.props.hosts) }\n            { this.generateRow2('Number of Usable Hosts', this.props.usableHosts) }\n            { this.generateRow2('Subnet Mask', this.props.subnetNumber) }\n            { this.generateRow2('Wildcard Mask', this.props.wildcardMask) }\n            { this.generateRow2('Binary Subnet Mask', this.props.binarySubnetMask) }\n            { this.generateRow2('IP Class', this.props.ipClass) }\n            { this.generateRow2('CIDR Notation', this.props.cidr) }\n            { this.generateRow2('IP Type', this.props.ipType) }\n            { this.generateRow2('Short', this.props.ipAddress + this.props.cidr) }\n            { this.generateRow2('Binary ID', this.props.binaryID) }\n            { this.generateRow2('Integer ID', this.props.integerID) }\n            { this.generateRow2('Hex ID', this.props.hexID) }\n          </tbody>\n        </table>\n        <div className=\"space space-between-result\"></div>\n\n        {this.generateAllPossibleNetworkHeader()}\n        <table className=\"table table-sm table-hover\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th>Network Address</th>\n              <th>Usable Host Range</th>\n              <th>Broadcast Address</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.generateAllPossibleNetworkRow()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Result;\n","import React, { Component } from 'react';\nimport ip from 'ip';\nimport './App.css';\n\nimport Header from './components/header'\nimport Footer from './components/footer'\nimport InputBlock from './components/input-block'\nimport Result from './components/result'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasResult: false,\n      networkClass: \"any\",\n      options: this.generateSubnet(32),\n      ip: \"158.108.12.34\",\n      isIPValid: true,\n\n      ipAddress: \"158.108.12.34\",\n      networkAddress: \"158.108.12.0\",\n      usableHostIPRange: \"158.108.12.1 - 158.108.12.254\",\n      broadcastAddress: \"158.108.12.255\",\n      hosts: \"256\",\n      usableHosts: \"254\",\n      subnetValue: \"24\",\n      wildcardMask: \"0.0.0.255\",\n      ipClass: \"C\",\n      cidr: \"/24\",\n      ipType: \"Public\",\n      networkAddressForH1: \"158.108.12.*\",\n      allPossibleNetwork: Array(1).fill().map((_, i) => {\n        let newNetworkAddress = ip.fromLong(ip.toLong(\"158.108.12.0\") + (256 * i));\n        let obj = ip.subnet(newNetworkAddress, ip.fromPrefixLen(\"24\"))\n        return {\n          networkAddress: newNetworkAddress,\n          usableHostRange: obj.firstAddress + ' - ' + obj.lastAddress,\n          broadcastAddress: obj.broadcastAddress,\n        }\n      }),\n    }\n  }\n\n  // componentDidMount() {\n  //   this.setState({\n  //     ip: ip.address(),\n  //     ipAddress: ip.address(),\n  //   }, this.ipHandler({ target: {value: this.state.ip} }))\n  // }\n\n  networkClassHandler(event) {\n    this.setState({\n      networkClass: event.target.value,\n      subnetValue: 24,\n    }, this.manageOptions)\n  }\n\n  subnetHandler(event) {\n    let obj = ip.cidrSubnet(this.state.ip + '/' + event.target.value);\n    let usableHostIPRange, hosts, usableHosts\n    if(event.target.value === '31') {\n      usableHostIPRange = \"None\";\n      hosts = 2;\n      usableHosts = 0;\n    } else if(event.target.value ==='32') {\n      usableHostIPRange = \"None\";\n      hosts = 1;\n      usableHosts = 0;\n    } else {\n      usableHostIPRange = obj.firstAddress + ' - ' + obj.lastAddress;\n      hosts = ip.toLong(obj.lastAddress) - ip.toLong(obj.firstAddress) + 1 + 2;\n      usableHosts = ip.toLong(obj.lastAddress) - ip.toLong(obj.firstAddress) + 1;\n    }\n\n    this.setState({\n      subnetValue: event.target.value,\n      cidr: \"/\" + event.target.value,\n      ipClass: this.calIPClass(event.target.value),\n      wildcardMask: ip.not(ip.fromPrefixLen(event.target.value)),\n      networkAddress: ip.mask(this.state.ip, ip.fromPrefixLen(event.target.value)),\n      broadcastAddress: obj.broadcastAddress,\n      usableHostIPRange,\n      hosts,\n      usableHosts,\n      networkAddressForH1: this.calNetworkAddressForH1(ip.mask(this.state.ip, ip.fromPrefixLen(event.target.value)), event.target.value),\n      allPossibleNetwork: this.calAllPossibleNetwork(ip.mask(this.state.ip, ip.fromPrefixLen(event.target.value)), event.target.value),\n    })\n  }\n\n  ipHandler(event) {\n    this.setState({ip: event.target.value});\n\n    if(ip.isV4Format(event.target.value) && event.target.value.split('.').every(e => e <= 255)) {\n      let obj = ip.cidrSubnet(event.target.value + '/' + this.state.subnetValue);\n      let usableHostIPRange, hosts, usableHosts\n      if(this.state.subnetValue ==='31') {\n        usableHostIPRange = \"None\";\n        hosts = 2;\n        usableHosts = 0;\n      } else if(this.state.subnetValue === '32') {\n        usableHostIPRange = \"None\";\n        hosts = 1;\n        usableHosts = 0;\n      } else {\n        usableHostIPRange = obj.firstAddress + ' - ' + obj.lastAddress;\n        hosts = ip.toLong(obj.lastAddress) - ip.toLong(obj.firstAddress) + 1 + 2;\n        usableHosts = ip.toLong(obj.lastAddress) - ip.toLong(obj.firstAddress) + 1;\n      }\n\n      this.setState({\n        isIPValid: true,\n        ipAddress: event.target.value,\n        networkAddress: ip.mask(event.target.value, ip.fromPrefixLen(this.state.subnetValue)),\n        ipType: ip.isPrivate(event.target.value) ? \"Private\" : \"Public\",\n        broadcastAddress: obj.broadcastAddress,\n        usableHostIPRange,\n        hosts,\n        usableHosts,\n        networkAddressForH1: this.calNetworkAddressForH1(ip.mask(event.target.value, ip.fromPrefixLen(this.state.subnetValue)), this.state.subnetValue),\n        allPossibleNetwork: this.calAllPossibleNetwork(ip.mask(event.target.value, ip.fromPrefixLen(this.state.subnetValue)), this.state.subnetValue),\n      })\n    } else {\n      this.setState({isIPValid: false})\n    }\n  }\n\n  generateSubnet(quantity) {\n    return Array(quantity).fill().map((_, i) => {\n      return {\n        name: ip.fromPrefixLen(32-i) + ' / ' + (32-i),\n        value: 32-i,\n        number: ip.fromPrefixLen(32-i)\n      }\n    })\n  }\n\n  manageOptions() {\n    let options\n    if (this.state.networkClass === \"any\") {\n      options = this.generateSubnet(32)\n    }\n    if (this.state.networkClass === \"a\") {\n      options = this.generateSubnet(25)\n    }\n    if (this.state.networkClass === \"b\") {\n      options = this.generateSubnet(17)\n    }\n    if (this.state.networkClass === \"c\") {\n      options = this.generateSubnet(9)\n    }\n    this.setState({ options })\n  }\n\n  calIPClass(subnetValue) {\n    if(subnetValue >= 24)\n      return \"C\";\n    else if(subnetValue >= 16)\n      return \"B\";\n    else if(subnetValue >= 8)\n      return \"A\";\n    else\n      return \"None\";\n  }\n\n  calAllPossibleNetwork(networkAddress, subnetValue) {\n    let offset = 2 ** (32 - subnetValue);\n    let round = this.calRound(subnetValue);\n    networkAddress = this.calNetworkAddressFromPrefix(networkAddress, subnetValue);\n\n    return (\n      Array(round).fill().map((_, i) => {\n        let newNetworkAddress = ip.fromLong(ip.toLong(networkAddress) + (offset * i));\n        let obj = ip.subnet(newNetworkAddress, ip.fromPrefixLen(subnetValue))\n        let usableHostRange = obj.firstAddress + ' - ' + obj.lastAddress;\n        if(subnetValue >= 31)\n          usableHostRange = \"None\";\n        return {\n          networkAddress: newNetworkAddress,\n          usableHostRange: usableHostRange,\n          broadcastAddress: obj.broadcastAddress,\n        }\n      })\n    )\n  }\n\n  calRound(subnetValue) {\n    if(subnetValue >= 24)\n      return 2 ** (subnetValue - 24);\n    else if(subnetValue >= 16)\n      return 2 ** (subnetValue - 16);\n    else if(subnetValue >= 8)\n      return 2 ** (subnetValue - 8);\n    else\n      return 2 ** subnetValue;\n  }\n\n  calNetworkAddressFromPrefix(networkAddress, subnetValue) {\n    if(subnetValue >= 24)\n      return ip.mask(networkAddress, ip.fromPrefixLen(24))\n    else if(subnetValue >= 16)\n      return ip.mask(networkAddress, ip.fromPrefixLen(16))\n    else if(subnetValue >= 8)\n      return ip.mask(networkAddress, ip.fromPrefixLen(8))\n    else\n      return ip.mask(networkAddress, ip.fromPrefixLen(0))\n  }\n\n  calNetworkAddressForH1(networkAddress, subnetValue) {\n    let newNetworkAddress\n    if(subnetValue >= 24)\n      newNetworkAddress = networkAddress.split('.').map((d, i) => i >= 3 ? '*' : d).join('.');\n    else if(subnetValue >= 16)\n      newNetworkAddress = networkAddress.split('.').map((d, i) => i >= 2 ? '*' : d).join('.');\n    else if(subnetValue >= 8)\n      newNetworkAddress = networkAddress.split('.').map((d, i) => i >= 1 ? '*' : d).join('.');\n    else\n      newNetworkAddress = networkAddress.split('.').map(() => '*').join('.');\n    return newNetworkAddress;\n  }\n\n  render() {\n    let binarySubnetMask = ip.toLong(ip.fromPrefixLen(this.state.subnetValue)).toString(2);\n    binarySubnetMask = [binarySubnetMask.slice(0,8), '.', binarySubnetMask.slice(8,16), '.', binarySubnetMask.slice(16,24), '.', binarySubnetMask.slice(24)]\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"space space-main-header\"></div>\n\n        <InputBlock\n          networkClassHandler={this.networkClassHandler.bind(this)}\n          subnetHandler={this.subnetHandler.bind(this)}\n          ipHandler={this.ipHandler.bind(this)}\n          options={this.state.options}\n          subnetValue={this.state.subnetValue}\n          ip={this.state.ip}\n          isIPValid={this.state.isIPValid}\n        />\n        <div className=\"space space-input-box\"></div>\n\n        <Result\n          hasResult={this.state.hasResult}\n          networkClass={this.state.networkClass}\n          subnetValue={this.state.subnetValue}\n          subnetNumber={ip.fromPrefixLen(this.state.subnetValue)}\n          ip={this.state.ip}\n\n          ipAddress={this.state.ipAddress}\n          networkAddress={this.state.networkAddress}\n          usableHostIPRange={this.state.usableHostIPRange}\n          broadcastAddress={this.state.broadcastAddress}\n          hosts={this.state.hosts}\n          usableHosts={this.state.usableHosts}\n          // subnetNumber={ip.fromPrefixLen(this.state.subnetValue)}\n          wildcardMask={this.state.wildcardMask}\n          binarySubnetMask={binarySubnetMask}\n          ipClass={this.state.ipClass}\n          cidr={this.state.cidr}\n          ipType={this.state.ipType}\n          binaryID={ip.toLong(this.state.ipAddress).toString(2)}\n          integerID={ip.toLong(this.state.ipAddress).toString(10)}\n          hexID={ip.toLong(this.state.ipAddress).toString(16)}\n          networkAddressForH1={this.state.networkAddressForH1}\n          allPossibleNetwork={this.state.allPossibleNetwork}\n        />\n        <div className=\"space space-result-box\"></div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}